generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model person {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
}

model Shop {
  Name           String?        @db.VarChar
  Type           String?        @db.VarChar
  PhoneNumber    String         @unique(map: "Shop_pk2") @db.VarChar
  tin            String         @db.VarChar
  RetailPoints   Int?
  Website        String?        @db.VarChar
  Email          String?        @db.VarChar
  Password       String?        @db.VarChar
  Logo           String?        @db.VarChar
  ShopID         String         @id(map: "Shop_pk") @default(uuid()) @db.Uuid
  HouseNumber    String?        @db.VarChar
  Street         String?        @db.VarChar
  zip            Int?
  Thana          String?        @db.VarChar
  Division       String?        @db.VarChar
  AddressDetails String?        @db.VarChar
  Cart           Cart[]
  Order          Order[]
  ShopOwner      ShopOwner[]
  VoucherUsage   VoucherUsage[]
}

model Company {
  mid                String               @id(map: "Company_pk") @default(uuid()) @db.Uuid
  Name               String?              @db.VarChar
  PhoneNumber        String?              @db.VarChar
  tin                String?              @db.VarChar
  Website            String?              @db.VarChar
  Email              String?              @unique(map: "Company_pk2") @db.VarChar
  Password           String?              @db.VarChar
  Logo               String?              @db.VarChar
  Rating             Float?
  HouseNumber        String?              @db.VarChar
  Street             String?              @db.VarChar
  zip                Int?
  Thana              String?              @db.VarChar
  Division           String?              @db.VarChar
  AddressDetails     String?              @db.VarChar
  CompanyOwner       CompanyOwner[]
  Inventory          Inventory[]
  OrderFragment      OrderFragment[]
  Product            Product[]
  ProductionHouse    ProductionHouse[]
  SingleProductOrder SingleProductOrder[]
  Voucher            Voucher[]
}

model ShopOwner {
  sid         String    @db.Uuid
  nid         String    @db.VarChar
  Name        String?   @db.VarChar
  Image       String?   @db.VarChar
  Email       String    @db.VarChar
  PhoneNumber String?   @db.VarChar
  dob         DateTime? @db.Date
  Shop        Shop      @relation(fields: [sid], references: [ShopID], onDelete: NoAction, onUpdate: NoAction, map: "Owner_Shop_ShopID_fk")

  @@id([sid, nid], map: "Owner_pk")
}

model Category {
  CategoryName     String    @id(map: "Category_pk") @db.VarChar
  Image            String?   @db.VarChar
  PopularityStatus Boolean?
  Product          Product[]
}

model CompanyOwner {
  mid         String    @db.Uuid
  nid         String    @db.VarChar
  Name        String?   @db.VarChar
  Image       String?   @db.VarChar
  Email       String    @db.VarChar
  PhoneNumber String?   @db.VarChar
  dob         DateTime? @db.Date
  Company     Company   @relation(fields: [mid], references: [mid], onDelete: NoAction, onUpdate: NoAction, map: "CompanyOwner_Company_mid_fk")

  @@id([mid, nid], map: "CompanyOwner_pk")
}

model Cart {
  sid            String  @db.Uuid
  pid            String  @db.Uuid
  Quantity       Int?
  Price          Float?
  DeliveryCharge Float?
  Product        Product @relation(fields: [pid], references: [pid], onDelete: NoAction, onUpdate: NoAction, map: "Cart_Product_pid_fk")
  Shop           Shop    @relation(fields: [sid], references: [ShopID], onDelete: NoAction, onUpdate: NoAction, map: "Cart_Shop_ShopID_fk")

  @@id([sid, pid], map: "Cart_pk")
}

model Inventory {
  iid            String           @id(map: "Inventory_pk") @default(uuid()) @db.Uuid
  mid            String           @db.Uuid
  InventoryName  String?          @db.VarChar
  Capacity       Float?
  Type           String?          @db.VarChar
  Image          String?          @db.VarChar
  Details        String?          @db.VarChar
  EmptyStatus    Boolean?
  OwnerStatus    Boolean?
  HouseNumber    String?          @db.VarChar
  Street         String?          @db.VarChar
  zip            Int?
  Thana          String?          @db.VarChar
  Division       String?          @db.VarChar
  AddressDetails String?          @db.VarChar
  Company        Company          @relation(fields: [mid], references: [mid], onDelete: NoAction, onUpdate: NoAction, map: "Inventory_Company_mid_fk")
  InventoryBatch InventoryBatch[]
}

model InventoryBatch {
  bid               String    @id(map: "InventoryBatch_pk") @default(uuid()) @db.Uuid
  pid               String    @db.Uuid
  iid               String    @db.Uuid
  ManufacturingDate DateTime? @db.Date
  ExpiryDate        DateTime? @db.Date
  Quantity          Int?
  MarketStatus      Boolean?
  Sale              Float?
  Inventory         Inventory @relation(fields: [iid], references: [iid], onDelete: NoAction, onUpdate: NoAction, map: "InventoryBatch_Inventory_iid_fk")
  Product           Product   @relation(fields: [pid], references: [pid], onDelete: NoAction, onUpdate: NoAction, map: "InventoryBatch_Product_pid_fk")
}

model PaymentMethod {
  Name String  @id(map: "PaymentMethod_pk") @db.VarChar
  Logo String? @db.VarChar
}

model Product {
  pid                            String                 @id(map: "Product_pk") @default(uuid()) @db.Uuid
  mid                            String                 @db.Uuid
  CategoryName                   String                 @db.VarChar
  ProductName                    String                 @db.VarChar
  Image                          String?                @db.VarChar
  Weight_volume                  Float?
  Unit                           String?                @db.VarChar
  UnitPrice                      Float?
  Description                    String?                @db.VarChar
  Rating                         Float?
  MinQuantityForSale             Int?
  MinQuantityForDiscount         Int?
  MinimumDiscount                Float?
  MaximumDiscount                Float?
  DiscountRate                   Float?
  ProductQuantityForDiscountRate Int?
  MinimumDeliveryCharge          Float?
  DeliveryChargeIncreaseRate     Float?
  Cart                           Cart[]
  InventoryBatch                 InventoryBatch[]
  Category                       Category               @relation(fields: [CategoryName], references: [CategoryName], onDelete: NoAction, onUpdate: NoAction, map: "Product_Category_CategoryName_fk")
  Company                        Company                @relation(fields: [mid], references: [mid], onDelete: NoAction, onUpdate: NoAction, map: "Product_Company_mid_fk")
  ProductionHouseBatch           ProductionHouseBatch[]
  SingleProductOrder             SingleProductOrder[]
}

model ProductionHouse {
  phid                 String                 @id(map: "ProductionHouse_pk") @default(uuid()) @db.Uuid
  mid                  String                 @db.Uuid
  ProductionHouseName  String?                @db.VarChar
  Capacity             Float?
  Type                 String?                @db.VarChar
  Image                String?                @db.VarChar
  Details              String?                @db.VarChar
  HouseNumber          String?                @db.VarChar
  Street               String?                @db.VarChar
  zip                  Int?
  Thana                String?                @db.VarChar
  Division             String?                @db.VarChar
  AddressDetails       String?                @db.VarChar
  Company              Company                @relation(fields: [mid], references: [mid], onDelete: NoAction, onUpdate: NoAction, map: "ProductionHouse_Company_mid_fk")
  ProductionHouseBatch ProductionHouseBatch[]
}

model ProductionHouseBatch {
  bid               String          @id(map: "ProductionHouseBatch_pk") @default(uuid()) @db.Uuid
  pid               String          @db.Uuid
  phid              String          @db.Uuid
  ManufacturingDate DateTime?       @db.Date
  ExpiryDate        DateTime?       @db.Date
  Quantity          Int?
  Product           Product         @relation(fields: [pid], references: [pid], onDelete: NoAction, onUpdate: NoAction, map: "ProductionHouseBatch_Product_pid_fk")
  ProductionHouse   ProductionHouse @relation(fields: [phid], references: [phid], onDelete: NoAction, onUpdate: NoAction, map: "ProductionHouseBatch_ProductionHouse_phid_fk")
}

model Voucher {
  VoucherCode       String         @id(map: "Voucher_pk") @default(uuid()) @db.Uuid
  mid               String         @db.Uuid
  VoucherName       String         @db.VarChar
  VoucherPercentage Float?
  validity          DateTime?      @db.Date
  MinPurchase       Float?
  MaxUsage          Int?
  Company           Company        @relation(fields: [mid], references: [mid], onDelete: NoAction, onUpdate: NoAction, map: "Voucher_Company_mid_fk")
  VoucherUsage      VoucherUsage[]
}

model VoucherUsage {
  sid         String  @db.Uuid
  VoucherCode String  @db.Uuid
  Usage       Int?
  Shop        Shop    @relation(fields: [sid], references: [ShopID], onDelete: NoAction, onUpdate: NoAction, map: "VoucherUsage_Shop_ShopID_fk")
  Voucher     Voucher @relation(fields: [VoucherCode], references: [VoucherCode], onDelete: NoAction, onUpdate: NoAction, map: "VoucherUsage_Voucher_VoucherCode_fk")

  @@id([sid, VoucherCode], map: "VoucherUsage_pk")
}

model Order {
  oid                String               @id(map: "Order_pk") @default(uuid()) @db.Uuid
  sid                String               @db.Uuid
  OrderDate          DateTime?            @db.Date
  TotalPrice         Float?
  PaidAmount         Float?
  PaymentStatus      String?              @db.VarChar
  DeliveryStatus     String?              @db.VarChar
  PaymentMethod      String?              @db.VarChar
  PaymentLastDate    DateTime?            @db.Date
  Shop               Shop                 @relation(fields: [sid], references: [ShopID], onDelete: NoAction, onUpdate: NoAction, map: "Order_Shop_ShopID_fk")
  OrderFragment      OrderFragment[]
  SingleProductOrder SingleProductOrder[]
}

model OrderFragment {
  oid             String    @db.Uuid
  mid             String    @db.Uuid
  RawPrice        Float?
  DeliveryCharge  Float?
  VoucherCode     String?   @db.VarChar
  ReducedAmount   Float?
  FinalPrice      Float?
  PaidAmount      Float?
  PaymentStatus   String?   @db.VarChar
  DeliveryStatus  String?   @db.VarChar
  DeliveryDate    DateTime? @db.Date
  PaymentLastDate DateTime? @db.Date
  Company         Company   @relation(fields: [mid], references: [mid], onDelete: NoAction, onUpdate: NoAction, map: "OrderFragment_Company_mid_fk")
  Order           Order     @relation(fields: [oid], references: [oid], onDelete: NoAction, onUpdate: NoAction, map: "OrderFragment_Order_oid_fk")

  @@id([oid, mid], map: "OrderFragment_pk")
}

model SingleProductOrder {
  oid             String  @db.Uuid
  mid             String  @db.Uuid
  pid             String  @db.Uuid
  Quantity        Int?
  ShippedQuantity Int?
  ShipmentStatus  String? @db.VarChar
  Price           Float?
  Company         Company @relation(fields: [mid], references: [mid], onDelete: NoAction, onUpdate: NoAction, map: "SingleProductOrder_Company_mid_fk")
  Order           Order   @relation(fields: [oid], references: [oid], onDelete: NoAction, onUpdate: NoAction, map: "SingleProductOrder_Order_oid_fk")
  Product         Product @relation(fields: [pid], references: [pid], onDelete: NoAction, onUpdate: NoAction, map: "SingleProductOrder_Product_pid_fk")

  @@id([oid, mid, pid], map: "SingleProductOrder_pk")
}
